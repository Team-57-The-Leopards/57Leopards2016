// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/BiasDrive.h"
#include "Commands/Drive.h"
#include "Commands/Intake_Down.h"
#include "Commands/Intake_Pos.h"
#include "Commands/Intake_Stop.h"
#include "Commands/Intake_Up.h"
#include "Commands/IntakePort.h"
#include "Commands/Roller_In.h"
#include "Commands/Roller_Out.h"
#include "Commands/Roller_Stop.h"
#include "POVJoystickButton.h"



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveStick.reset(new Joystick(0));
    
//    btnAngleOff.reset(new JoystickButton(driveStick.get(), 12));
//    btnAngleOff->WhenReleased(new ServoOff());
//    btnManLift.reset(new JoystickButton(driveStick.get(), 12));
//    btnManLift->WhileHeld(new ManServo());
	//    btnLiftManOutStop.reset(new LiftJoystickButton(driveStick.get(), 7, false));
	//    btnLiftManOutStop->WhenReleased(new LiftMan(0));
	//    btnLiftManInStop.reset(new LiftJoystickButton(driveStick.get(), 9, false));
	//    btnLiftManInStop->WhenReleased(new LiftMan(0));
	//    btnLiftManOut.reset(new LiftJoystickButton(driveStick.get(), 7, false));
	//    btnLiftManOut->WhenPressed(new LiftMan(-0.1));
	//    btnLiftManIn.reset(new LiftJoystickButton(driveStick.get(), 9, false));
	//    btnLiftManIn->WhenPressed(new LiftMan(0.1));
	//    btnIntakeDownStop.reset(new JoystickButton(driveStick.get(), 5));
	//    btnIntakeDownStop->WhenReleased(new Intake_Stop());
	//    btnIntakeUpStop.reset(new JoystickButton(driveStick.get(), 4));
	//    btnIntakeUpStop->WhenReleased(new Intake_Stop());
	//    btnIntakeDown.reset(new JoystickButton(driveStick.get(), 5));
	//    btnIntakeDown->WhenPressed(new Intake_Down(0.2));
    //    btnIntakeUp.reset(new JoystickButton(driveStick.get(), 4));
    //    btnIntakeUp->WhenPressed(new Intake_Up(0.2));
	btnIntakeVert.reset(new JoystickButton(driveStick.get(), 12));
	btnIntakeVert->WhenPressed(new Intake_Pos(-24661));
	btnIntakeHorz.reset(new JoystickButton(driveStick.get(), 11));
	btnIntakeHorz->WhenPressed(new Intake_Pos(-125865));
	btnIntakeCdF.reset(new JoystickButton(driveStick.get(), 3));
	btnIntakeCdF->WhenPressed(new Intake_Pos(-95000));
	btnIntakePort.reset(new JoystickButton(driveStick.get(), 4));
	btnIntakePort->WhenPressed(new IntakePort(-171445));
	btnIntakePortStop.reset(new JoystickButton(driveStick.get(), 4));
	btnIntakePortStop->WhenReleased(new Intake_Pos(-125865));
    btnRollersOutStop.reset(new JoystickButton(driveStick.get(), 2));
    btnRollersOutStop->WhenReleased(new Roller_Stop());
    btnRollersInStop.reset(new JoystickButton(driveStick.get(), 1));
    btnRollersInStop->WhenReleased(new Roller_Stop());
    btnRollersOut.reset(new JoystickButton(driveStick.get(), 2));
    btnRollersOut->WhenPressed(new Roller_Out(1));
    btnRollersIn.reset(new JoystickButton(driveStick.get(), 1));
    btnRollersIn->WhenPressed(new Roller_In(1));

    // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriveStick() {
   return driveStick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
