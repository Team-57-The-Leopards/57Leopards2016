// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Roller_In.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Roller_In::Roller_In(double speed): Command() {
    m_speed = speed;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::rollers.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
Roller_In::Roller_In(double speed, double timeout): Command(timeout) {
    m_speed = speed;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::rollers.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Roller_In::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void Roller_In::Execute() {//Add logic here to change roller speeds based on ball position in the robot based on feedback from sensors
	switch(Robot::rollers->GetIntakeState()){
		case 0:
			Robot::rollers->RunPrimary(fabs(m_speed));
			break;
		case 1:
			Robot::rollers->RunPrimary(0.5*fabs(m_speed));
			break;
		case 2:
			Robot::rollers->RunPrimary(-fabs(m_speed));
			break;
	}
}

// Make this return true when this Command no longer needs to run execute()
bool Roller_In::IsFinished() {
    return IsTimedOut();
}

// Called once after isFinished returns true
void Roller_In::End() {
	Robot::rollers->RunPrimary(0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Roller_In::Interrupted() {

}
